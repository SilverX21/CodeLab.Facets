using BenchmarkDotNet.Running;
using CodeLab.Facets;
using CodeLab.Facets.Models;
using Facet.Extensions;
using Facet.Extensions.EFCore;

BenchmarkRunner.Run<Benchmarks>();
return;

var dbContext = new AppDbContext();

var person1 = new Person
{
    FirstName = "John",
    LastName = "Cena",
    Birthday = new DateTime(1977, 4, 23),
    Email = "john.cena@gmail.com"
};

var person2 = new Person
{
    FirstName = "Randy",
    LastName = "Orton",
    Birthday = new DateTime(1980, 4, 1),
    Email = "randy.orton@gmail.com"
};

await dbContext.People.AddAsync(person1);
await dbContext.People.AddAsync(person2);
var result = await dbContext.SaveChangesAsync();

//Here we are referring that we want to map the Person model to the PersonDto model.
var dto = person1.ToFacet<Person, PersonDto>();

//Alternatively, we can use the old way of mapping using the PersonDto constructor that is generated bu Facet.
var oldSchool = new PersonDto(person1);

Console.WriteLine($"Here we have {dto.FirstName}! He was born in {dto.Birthday.ToShortDateString()}!");

//We can also use the projection to map a list of Person models to a list of PersonDto models.
// This is useful when we want to map a list of models to a list of DTOs.
//inside the select we are using the PersonDto.Projection method that is generated by Facet to map the Person model to the PersonDto model.
var dbpeople = dbContext.People.Select(PersonDto.Projection).ToList();

List<Person> list = [person1, person2];
//We can also use the projection to map a list of Person models to a list of PersonDto models.
//here we need to compile the projection to use it in memory.
var inMemory = list.Select(PersonDto.Projection.Compile()).ToList();

//there is a simpler way
//to map a list of Person models to a list of PersonDto models using the SelectFacets extension method.
var simple = list.SelectFacets<Person, PersonDto>().ToList();

//we can also use the ToFacetsAsync extension method to map a list of Person models to a list of PersonDto models asynchronously.
var cool = await dbContext.People.ToFacetsAsync<Person, PersonDto>();

Console.ReadLine();